/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.as.oss.fl.federatedcompute.util;

import static com.google.android.as.oss.fl.api.proto.TrainerOptions.SchedulingMode.SCHEDULING_MODE_ONE_TIME;
import static com.google.android.as.oss.fl.api.proto.TrainerOptions.SchedulingMode.SCHEDULING_MODE_RECURRENT;

import android.net.Uri;
import com.google.android.as.oss.fl.api.proto.TrainerOptions;
import com.google.android.as.oss.fl.fc.api.ExampleConsumption;
import com.google.android.as.oss.fl.fc.api.InAppTrainerOptions;
import com.google.android.as.oss.fl.fc.api.InAppTrainingConstraints;
import com.google.android.as.oss.fl.fc.api.TrainingInterval;
import com.google.android.as.oss.fl.fc.api.TrainingInterval.SchedulingMode;
import java.util.ArrayList;
import java.util.List;

/** Provides utilities to convert between FC and PCS classes that share the same function */
public final class ClassConversionUtils {
  private ClassConversionUtils() {}

  /**
   * Takes a Pcs InAppTrainerOptions object in and returns an FC InAppTrainerOptions object with the
   * values from the Pcs object mapped to the corresponding values in the FC object.
   */
  public static com.google.fcp.client.InAppTrainerOptions pcsToFcInAppTrainerOptions(
      InAppTrainerOptions options) {
    com.google.fcp.client.InAppTrainerOptions.Builder builder =
        com.google.fcp.client.InAppTrainerOptions.newBuilder()
            .setAttestationMode(options.getAttestationMode())
            .setContextData(options.getContextData())
            .setJobSchedulerJobId(
                options.getJobSchedulerJobId(), options.getAllowFallbackToAutoGeneratedJobId())
            .setOverrideDeadlineMillis(options.getOverrideDeadlineMillis())
            .setSessionName(options.getSessionName());

    if (options.getFederatedPopulationName() != null) {
      builder.setFederatedOptions(options.getFederatedPopulationName());
    }

    Uri personalizationPlan = options.getPersonalizationPlan();
    Uri inputDirectory = options.getInputDirectory();
    Uri outputDirectory = options.getOutputDirectory();
    if (personalizationPlan != null && inputDirectory != null && outputDirectory != null) {
      builder.setLocalComputationOptions(personalizationPlan, inputDirectory, outputDirectory);
    }

    InAppTrainingConstraints constraints = options.getTrainingConstraints();
    if (constraints != null) {
      builder.setTrainingConstraints(
          com.google.fcp.client.InAppTrainingConstraints.newBuilder()
              .setRequiresCharging(constraints.getRequiresCharging())
              .setRequiresNonInteractive(constraints.getRequiresNonInteractive())
              .setRequiresUnmeteredNetwork(constraints.getRequiresUnmeteredNetwork())
              .build());
    }

    TrainingInterval interval = options.getTrainingInterval();
    if (interval != null) {
      builder.setTrainingInterval(
          com.google.fcp.client.TrainingInterval.newBuilder()
              .setMinimumIntervalMillis(interval.getMinimumIntervalMillis())
              .setSchedulingMode(interval.getSchedulingMode())
              .build());
    }

    builder.setContextData(options.getContextData());
    return builder.build();
  }

  /**
   * Takes a Pcs ExampleConsumption object in and returns a Fc ExampleConsumption object with the
   * values from the Pcs object mapped to the corresponding values in the Fc object.
   */
  public static com.google.fcp.client.ExampleConsumption pcsToFcExampleConsumption(
      ExampleConsumption exampleConsumption) {
    return com.google.fcp.client.ExampleConsumption.newBuilder()
        .setCollectionName(exampleConsumption.getCollectionName())
        .setExampleCount(exampleConsumption.getExampleCount())
        .setResumptionToken(exampleConsumption.getResumptionToken())
        .setSelectionCriteria(exampleConsumption.getSelectionCriteria())
        .build();
  }

  public static TrainerOptions.SchedulingMode schedulingModeIntDefToEnum(int schedulingMode) {
    return switch (schedulingMode) {
      case SchedulingMode.RECURRENT -> SCHEDULING_MODE_RECURRENT;
      case SchedulingMode.ONE_TIME -> SCHEDULING_MODE_ONE_TIME;
      default ->
          throw new IllegalArgumentException(
              String.format("Unknown Scheduling Mode: %d", schedulingMode));
    };
  }

  public static int schedulingModeEnumToIntDef(TrainerOptions.SchedulingMode schedulingMode) {
    return switch (schedulingMode) {
      case SCHEDULING_MODE_RECURRENT -> SchedulingMode.RECURRENT;
      case SCHEDULING_MODE_ONE_TIME -> SchedulingMode.ONE_TIME;
      default ->
          throw new IllegalArgumentException(
              String.format("Unknown Scheduling Mode: %d", schedulingMode.getNumber()));
    };
  }

  /**
   * Takes a Fc InAppTrainerOptions object in and returns a Pcs InAppTrainerOptions object with the
   * values from the Fc object mapped to the corresponding values in the Pcs object.
   */
  public static InAppTrainerOptions copyTrainerOptions(
      com.google.fcp.client.InAppTrainerOptions options) {
    // Currently, options and examples are not used in ASI and handleResult always
    // returns success. Therefore, copying minimal required fields here.
    InAppTrainerOptions.Builder builder =
        InAppTrainerOptions.newBuilder()
            .setAttestationMode(options.getAttestationMode())
            .setJobSchedulerJobId(
                options.getJobSchedulerJobId(), options.getAllowFallbackToAutoGeneratedJobId())
            .setSessionName(options.getSessionName());

    if (options.getFederatedPopulationName() != null) {
      builder.setFederatedOptions(options.getFederatedPopulationName());
    }

    Uri personalizationPlan = options.getPersonalizationPlan();
    Uri inputDirectory = options.getInputDirectory();
    Uri outputDirectory = options.getOutputDirectory();
    if (personalizationPlan != null && inputDirectory != null && outputDirectory != null) {
      builder.setLocalComputationOptions(personalizationPlan, inputDirectory, outputDirectory);
    }

    com.google.fcp.client.TrainingInterval interval = options.getTrainingInterval();
    if (interval != null) {
      builder.setTrainingInterval(
          TrainingInterval.newBuilder()
              .setMinimumIntervalMillis(interval.getMinimumIntervalMillis())
              .setSchedulingMode(interval.getSchedulingMode())
              .build());
    }
    builder.setContextData(options.getContextData());
    return builder.build();
  }

  /**
   * Takes a list of Fc ExampleConsumption objects in and returns a list of Pcs ExampleConsumption
   * objects with the values from the Fc objects mapped to the corresponding values in the Pcs
   * objects.
   */
  public static List<ExampleConsumption> copyExampleConsumptionList(
      List<com.google.fcp.client.ExampleConsumption> exampleConsumptionList) {
    List<ExampleConsumption> examples = new ArrayList<>();
    for (com.google.fcp.client.ExampleConsumption example : exampleConsumptionList) {
      examples.add(
          ExampleConsumption.newBuilder()
              .setCollectionName(example.getCollectionName())
              .setExampleCount(example.getExampleCount())
              .setResumptionToken(example.getResumptionToken())
              .setSelectionCriteria(example.getSelectionCriteria())
              .build());
    }
    return examples;
  }
}
