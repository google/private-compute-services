// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package com.google.android.as.oss.logging;

option features.enum_type = CLOSED;
option java_outer_classname = "PcsStatsEnums";
option java_package = "com.google.android.as.oss.logging";

enum CountMetricId {
  UNKNOWN_COUNT = 0;
  PCS_HTTP_DOWNLOAD_SUCCESS = 13;
  PCS_HTTP_DOWNLOAD_FAILURE = 14;
  PCS_INPROCESS_HTTP_DOWNLOAD_SUCCESS = 15;
  PCS_INPROCESS_HTTP_DOWNLOAD_FAILURE = 16;
  PCS_PIR_DOWNLOAD_SUCCESS = 17;
  PCS_PIR_DOWNLOAD_FAILURE = 18;
  PCS_INPROCESS_PIR_DOWNLOAD_SUCCESS = 19;
  PCS_INPROCESS_PIR_DOWNLOAD_FAILURE = 20;
  PCC_SETTINGS_OPENED = 90;
  PCS_NETWORK_USAGE_LOG_ACTIVITY_ENABLED = 92;
  PCS_NETWORK_USAGE_LOG_OPTED_OUT = 93;
  PCS_NETWORK_USAGE_LOG_OPTED_IN = 94;
  PCS_NETWORK_USAGE_LOG_OPENED = 95;
  PCS_NETWORK_USAGE_LOG_ITEM_INSPECTED = 96;
  PCS_NETWORK_USAGE_LOG_NO_ITEM_INSPECTED = 97;
  PCS_NETWORK_USAGE_LOG_POLICY_INSPECTED = 98;
  PCS_NETWORK_USAGE_LOG_UNRECOGNISED_REQUEST = 99;
  PCC_ATTESTATION_MEASUREMENT_REQUEST = 109;
  PCC_ATTESTATION_RECORD_GENERATED = 110;
  PCS_TRAINING_STATS_UNAVAILABLE_EXCEPTION = 113;
  PCS_TRAINING_STATS_QUERY_EXCEPTION = 114;
  PCS_TRAINING_STATS_QUERY_SUCCESS = 115;
  PCS_TRAINING_STATS_ATTEMPTED = 116;
  PCS_TRAINING_STATS_EXCEPTION_NO_CONFIGS_FOUND = 117;
  PCS_TRAINING_STATS_EXCEPTION_NO_MATCHING_RESTRICTED_CONFIGS = 118;
  PCS_TRAINING_STATS_EXCEPTION_AMBIGUOUS_CONFIG_KEY = 119;
  PCS_TRAINING_STATS_EXCEPTION_INCONSISTENT_ROW_SIZES = 120;
  PCS_TRAINING_STATS_EXCEPTION_UNKNOWN = 121;

  // IPC Status codes
  PCS_TRAINING_BINDER_DIED = 125;
  PCS_TRAINING_BINDER_NULL = 126;
  PCS_TRAINING_BINDER_SERVICE_DISCONNECTED = 127;
  PCS_TRAINING_BINDER_SERVICE_CONNECTED = 128;
}

enum ValueMetricId {
  UNKNOWN_VALUE = 0;
  PCS_STATSMANAGER_QUERY_SUCCESS_LATENCY_MS = 100;
  PCS_STATSMANAGER_QUERY_FAILURE_LATENCY_MS = 101;
  PCS_NUM_JOBS_SCHEDULED_COUNT = 102;
  NOW_PLAYING_POPULATION_SCHEDULED_COUNT = 103;
  NEXT_CONVERSATION_POPULATION_SCHEDULED_COUNT = 104;
  SAFE_COMMS_POPULATION_SCHEDULED_COUNT = 105;
  AUTOFILL_POPULATION_SCHEDULED_COUNT = 106;
  CONTENT_CAPTURE_POPULATION_SCHEDULED_COUNT = 107;
  ECHO_POPULATION_SCHEDULED_COUNT = 108;
  OVERVIEW_POPULATION_SCHEDULED_COUNT = 109;
  LIVE_TRANSLATE_POPULATION_SCHEDULED_COUNT = 130;
  TOAST_SEARCH_POPULATION_SCHEDULED_COUNT = 111;
  TOAST_QUERY_POPULATION_SCHEDULED_COUNT = 112;
  AMBIENT_CONTEXT_POPULATION_SCHEDULED_COUNT = 113;
  PECAN_POPULATION_SCHEDULED_COUNT = 114;
  PLAY_PROTECTION_POPULATION_SCHEDULED_COUNT = 115;
  PLATFORM_LOGGING_POPULATION_SCHEDULED_COUNT = 116;
  SMARTSELECT_POPULATION_SCHEDULED_COUNT = 117;
  UNKNOWN_POPULATION_SCHEDULED_COUNT = 118;
  SMART_NOTIFICATION_POPULATION_SCHEDULED_COUNT = 119;
}

enum TrainingEventKind {
  TRAIN_UNDEFINED = 0;
  TRAIN_STARTED = 1;
  TRAIN_COMPLETED = 2;
  TRAIN_INTERRUPTED = 4;
  TRAIN_ERROR = 8;
  TRAIN_NOT_STARTED = 10;
  TRAIN_DOWNLOADED = 12;
  TRAIN_UPLOADED = 13;
  TRAIN_TURNED_AWAY = 14;
  TRAIN_DOWNLOAD_STARTED = 15;
  TRAIN_UPLOAD_STARTED = 16;
  TRAIN_ELIGIBILITY_EVAL_DOWNLOAD_STARTED = 17;
  TRAIN_ELIGIBILITY_EVAL_PLAN_URI_RECEIVED = 55;
  TRAIN_ELIGIBILITY_EVAL_PLAN_RECEIVED = 18;
  TRAIN_ELIGIBILITY_EVAL_NOT_CONFIGURED = 19;
  TRAIN_ELIGIBILITY_EVAL_TURNED_AWAY = 20;
  TRAIN_ELIGIBILITY_EVAL_DOWNLOAD_ERROR_IO = 21;
  TRAIN_ELIGIBILITY_EVAL_DOWNLOAD_ERROR_INVALID_PAYLOAD = 22;
  TRAIN_ELIGIBILITY_EVAL_DOWNLOAD_CLIENT_INTERRUPTED = 23;
  TRAIN_ELIGIBILITY_EVAL_DOWNLOAD_SERVER_ABORTED = 24;
  TRAIN_DOWNLOAD_ERROR_IO = 25;
  TRAIN_DOWNLOAD_ERROR_INVALID_PAYLOAD = 26;
  TRAIN_DOWNLOAD_CLIENT_INTERRUPTED = 27;
  TRAIN_DOWNLOAD_SERVER_ABORTED = 28;
  TRAIN_DOWNLOAD_PLAN_URI_RECEIVED = 56;
  TRAIN_DOWNLOAD_PLAN_RECEIVED = 29;
  TRAIN_DOWNLOAD_TURNED_AWAY = 30;
  TRAIN_ELIGIBILITY_EVAL_COMPUTATION_STARTED = 31;
  TRAIN_ELIGIBILITY_EVAL_COMPUTATION_ERROR_TENSORFLOW = 32;
  TRAIN_ELIGIBILITY_EVAL_COMPUTATION_ERROR_IO = 33;
  TRAIN_ELIGIBILITY_EVAL_COMPUTATION_ERROR_INVALID_ARGUMENT = 34;
  TRAIN_ELIGIBILITY_EVAL_COMPUTATION_ERROR_EXAMPLE_ITERATOR = 35;
  TRAIN_ELIGIBILITY_EVAL_COMPUTATION_CLIENT_INTERRUPTED = 36;
  TRAIN_ELIGIBILITY_EVAL_COMPUTATION_COMPLETED = 37;
  TRAIN_COMPUTATION_STARTED = 38;
  TRAIN_COMPUTATION_ERROR_TENSORFLOW = 39;
  TRAIN_COMPUTATION_ERROR_IO = 40;
  TRAIN_COMPUTATION_ERROR_INVALID_ARGUMENT = 41;
  TRAIN_COMPUTATION_ERROR_EXAMPLE_ITERATOR = 42;
  TRAIN_COMPUTATION_CLIENT_INTERRUPTED = 43;
  TRAIN_COMPUTATION_COMPLETED = 44;
  TRAIN_RESULT_UPLOAD_STARTED = 45;
  TRAIN_RESULT_UPLOAD_ERROR_IO = 46;
  TRAIN_RESULT_UPLOAD_CLIENT_INTERRUPTED = 47;
  TRAIN_RESULT_UPLOAD_SERVER_ABORTED = 48;
  TRAIN_RESULT_UPLOADED = 49;
  TRAIN_FAILURE_UPLOAD_STARTED = 50;
  TRAIN_FAILURE_UPLOAD_ERROR_IO = 51;
  TRAIN_FAILURE_UPLOAD_CLIENT_INTERRUPTED = 52;
  TRAIN_FAILURE_UPLOAD_SERVER_ABORTED = 53;
  TRAIN_FAILURE_UPLOADED = 54;
}

enum TrainingErrorCode {
  TRAIN_ERROR_DEFAULT = 0;
  TRAIN_ERROR_TENSORFLOW = 1;
  TRAIN_ERROR_LOCAL_IO = 2;
  TRAIN_ERROR_EXAMPLE_SELECTOR = 3;
}

enum TrainingDataSourceType {
  TRAINING_DATA_SOURCE_UNDEFINED = 0;
  FEED = 1;
  DATASET = 2;
}

enum SecAggClientEventKind {
  CLIENT_UNDEFINED_EVENT = 0;
  CLIENT_STARTED = 1;
  CLIENT_COMPLETED = 2;
  CLIENT_ROUND_STARTED = 3;
  CLIENT_ROUND_COMPLETED = 4;
  CLIENT_CRYPTO_STARTED = 5;
  CLIENT_CRYPTO_COMPLETED = 6;
  CLIENT_INPUT_SET = 7;
  CLIENT_ERROR = 8;
  CLIENT_CRYPTO_ERROR = 9;
}

enum SecAggClientRound {
  CLIENT_UNDEFINED_ROUND = 0;
  CLIENT_ADVERTISE_KEYS = 1;
  CLIENT_SHARE_KEYS = 2;
  CLIENT_MASKED_INPUT_COLLECTION = 3;
  CLIENT_UNMASKING = 4;
  CLIENT_PROTOCOL_COMPLETED = 5;
  CLIENT_ABORTED = 6;
}

enum SecAggClientCryptoOperationType {
  UNDEFINED_CRYPTO_OPERATION = 0;
  SHAMIR_SHARING = 1;
  KEY_AGREEMENT = 2;
  AES_ENCRYPTION = 3;
  AES_DECRYPTION = 4;
  PRG_EXPANSION = 5;
}

enum SecAggClientErrorCode {
  CLIENT_UNDEFINED_ERROR = 0;
  CLIENT_ERROR_SERVER_INITIATED_ABORT = 1;
  CLIENT_ERROR_ENVIRONMENT_INITIATED_ABORT = 2;
  CLIENT_INVALID_MESSAGE_RECEIVED = 3;
  CLIENT_INVALID_INPUT_VECTOR = 4;
  CLIENT_SECURITY_ERROR = 5;
  CLIENT_INTERNAL_ERROR = 6;
  CLIENT_INTERNAL_ERROR_RUNTIME_EXC = 7;
}

enum CollectionName {
  COLLECTION_NAME_UNDEFINED = 0;
  COLLECTION_NAME_SIMPLESTORAGE = 1;
  COLLECTION_NAME_PLAY_PROTECT = 2;
  COLLECTION_NAME_STATSD = 3;
}

/** Enumerations of timer and counter identifiers. */
enum HistogramCounters {
  HISTOGRAM_COUNTER_UNDEFINED = 0;

  /**
   * How long it takes to run a plan on device, excluding downloading the plan
   * and reporting results.
   */
  TRAINING_RUN_PHASE_LATENCY = 1;

  /**
   * The end time of running training for a whole plan, excluding downloading
   * the plan and reporting results, relative to the start of the training
   * session.
   */
  TRAINING_RUN_PHASE_END_TIME = 2;

  /** How long running a "restore state op" takes. */
  TRAINING_RESTORE_STATE_LATENCY = 3;

  /**
   * How long it takes to run training for a whole client execution (which may
   * involve running multiple epochs). This includes connecting and fetching
   * example from the example store, as well as training over them.
   */
  TRAINING_RUN_CLIENT_EXECUTION_LATENCY = 4;

  /** How long running an "init op" takes. */
  TRAINING_INIT_OP_LATENCY = 5;

  /** How long running a "before op" takes. */
  TRAINING_BEFORE_OP_LATENCY = 6;

  /** How long running an "after op" takes. */
  TRAINING_AFTER_OP_LATENCY = 7;

  /**
   * How long it takes to run training for a whole epoch. This includes
   * connecting and fetching example from the example store, as well as training
   * over them.
   */
  TRAINING_RUN_EPOCH_LATENCY = 8;

  /**
   * How long it takes to gather enough examples for a mini batch.
   * This counter may be an average across minibatches and epochs.
   */
  TRAINING_GATHER_MINI_BATCH_LATENCY = 9;

  /**
   * How long it takes to run training on a mini batch.
   * This counter may be an average across minibatches and epochs.
   */
  TRAINING_RUN_MINI_BATCH_LATENCY = 10;

  /**
   * How long it takes the TensorFlow session to terminate after it's been
   * interrupted.
   */
  TRAINING_INTERRUPT_TERMINATION_LATENCY = 11;

  /** How long it takes to commit the opstats message to the database. */
  TRAINING_OPSTATS_COMMIT_LATENCY = 12;

  /**
   * How long it takes to receive the result to a {@link
   * ExampleStoreIterator#next} call, incl. time spent in IPC, proxy, and client
   * code.
   *
   * <p>Note: this used to be logged once per call to the {@code next()} method,
   * but this was of limited usefulness and had the potential to generate too
   * many logs. Instead, we now log this counter once per iterator, and log the
   * average time taken over all examples.
   */
  EXAMPLE_STORE_ITERATOR_NEXT_LATENCY = 20;

  /** The number of examples encountered by an example store iterator. */
  EXAMPLE_STORE_ITERATOR_OVERALL_EXAMPLE_COUNT = 21;

  /**
   * The cumulative size of examples encountered by an example store iterator.
   */
  EXAMPLE_STORE_ITERATOR_OVERALL_EXAMPLE_SIZE = 22;

  /**
   * Cumulative time spent over the course of a single iteration to receive and
   * return all examples. This includes the latency reported in {@link
   * #EXAMPLE_STORE_ITERATOR_OVERALL_IPC_LATENCY}.
   */
  EXAMPLE_STORE_ITERATOR_OVERALL_LATENCY = 23;

  /**
   * Cumulative time spent over the course of a single iteration to receive data
   * over the IPC boundary. This includes the latency reported in {@link
   * #EXAMPLE_STORE_ITERATOR_OVERALL_IPC_LATENCY}.
   */
  EXAMPLE_STORE_ITERATOR_OVERALL_IPC_LATENCY = 24;

  /**
   * Cumulative time spent over the course of a single iteration for the proxy
   * implementation to receive the data from the app and prepare it to be sent
   * over the IPC boundary. This includes the latency reported in {@link
   * #EXAMPLE_STORE_ITERATOR_OVERALL_CLIENT_LATENCY}.
   */
  EXAMPLE_STORE_ITERATOR_OVERALL_PROXY_LATENCY = 25;

  /**
   * Cumulative time spent over the course of a single iteration for the app's
   * implementation to return its data.
   */
  EXAMPLE_STORE_ITERATOR_OVERALL_CLIENT_LATENCY = 26;

  /** Example store errors. */
  EXAMPLE_STORE_ERROR_COUNT = 27;

  /**
   * The total amount of memory available to the kernel on this device. Maps to
   * {@code ActivityManager.MemoryInfo.totalMem}.
   */
  TRAINING_SYSTEM_TOTAL_MEM = 28;

  /**
   * The amount of memory available for allocations. Maps to {@code
   * ActivityManager.MemoryInfo.availMem}.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_SYSTEM_AVAILABLE_MEM = 29;

  /**
   * The threshold of available memory at which the system will start killing
   * processes to free up more memory. Maps to {@code
   * ActivityManager.MemoryInfo.threshold}.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_SYSTEM_LOW_MEM_THRESHOLD = 30;

  /**
   * The amount of memory available for allocations without triggering the low
   * memory killer. Maps to {@code ActivityManager.MemoryInfo.availMem -
   * ActivityManager.MemoryInfo.threshold}.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_SYSTEM_AVAILABLE_MEM_BEFORE_THRESHOLD = 31;

  /**
   * Whether the system is in a low-memory state at the time the counter is
   * logged. Maps to {@code ActivityManager.MemoryInfo.lowMem}.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_SYSTEM_LOW_MEM_STATE = 32;

  /**
   * The memory importance of the training process. Maps to {@code
   * ActivityManager.RunningAppProcessInfo.importance}.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_PROCESS_MEM_IMPORTANCE_STATE = 33;

  /**
   * The LRU status of the training process. Maps to {@code
   * ActivityManager.RunningAppProcessInfo.lru}.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_PROCESS_MEM_LRU_STATE = 34;

  /**
   * The Java heap memory usage of the training process.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_PROCESS_MEM_USAGE_JAVA_HEAP = 35;

  /**
   * The native memory PSS of the training process.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_PROCESS_MEM_USAGE_NATIVE_PSS = 36;

  /**
   * The reason the training process was stopped. Maps to {@code
   * JobParams.getStopReason}.
   *
   * <p>The dimensions proto will include a TrainingEventKind enum to
   * distinguish values logged before and after training.
   */
  TRAINING_PROCESS_STOP_REASON = 37;

  /**
   * How long running training takes in total, including checking in, training,
   * uploading the results.
   */
  TRAINING_OVERALL_LATENCY = 40;

  /** How long running an "save checkpoint op" takes. */
  TRAINING_SAVE_CHECKPOINT_LATENCY = 41;

  /**
   * How long it takes to receive the result to a {@link
   * com.google.fcp.client.ExampleStoreService#startQuery} call, incl.
   * time spent in IPC, proxy, and client code.
   */
  EXAMPLE_STORE_START_QUERY_LATENCY = 42;

  /**
   * How long it takes to wait for a {@link ExampleStoreIterator#close} call to
   * finish, incl. time spent in IPC, proxy, and client code.
   */
  EXAMPLE_STORE_ITERATOR_CLOSE_LATENCY = 43;

  /** How long the HTTP client initialization takes. */
  HTTP_CLIENT_INITIALIZATION_LATENCY = 44;

  /**
   * The number of examples encountered during overall training, across all
   * client executions.
   */
  TRAINING_OVERALL_EXAMPLE_COUNT = 100001;

  /**
   * The sum of the size (in bytes) of all the examples encountered during
   * overall training, across all client executions.
   */
  TRAINING_OVERALL_EXAMPLE_SIZE = 100002;

  /**
   * The number of examples encountered in a client execution, across all
   * epochs.
   */
  TRAINING_CLIENT_EXECUTION_EXAMPLE_COUNT = 100003;

  /**
   * The sum of the size (in bytes) of all the examples encountered in a client
   * execution, across all epoch.
   */
  TRAINING_CLIENT_EXECUTION_EXAMPLE_SIZE = 100004;

  /**
   * The number of examples encountered in an epoch.
   * This counter may be an average from multiple epochs.
   */
  TRAINING_EPOCH_EXAMPLE_COUNT = 100005;

  /**
   * The sum of the size (in bytes) of all the examples encountered in an
   * epoch. This counter may be an average from multiple epochs
   */
  TRAINING_EPOCH_EXAMPLE_SIZE = 100006;

  /**
   * The number of examples in a mini batch.
   * This counter may be an average from multiple minibatches.
   */
  TRAINING_MINI_BATCH_EXAMPLE_COUNT = 100007;

  /**
   * The sum of the size (in bytes) of all the examples in a mini batch.
   * This counter may be an average from multiple minibatches.
   */
  TRAINING_MINI_BATCH_EXAMPLE_SIZE = 100008;

  /** The size (in bytes) of the OpStatsDb file. */
  OPSTATS_DB_SIZE_BYTES = 100009;

  /** The number of entries in OpStatsDb. */
  OPSTATS_DB_NUM_ENTRIES = 100010;

  /** The number of entries pruned from OpStatsDb due to exceeding max size. */
  OPSTATS_NUM_PRUNED_ENTRIES = 100011;

  /**
   * The tenure (in hours) of the oldest entry which has been pruned from the
   * OpStatsDb due to exceeding max size.
   */
  OPSTATS_OLDEST_PRUNED_ENTRY_TENURE_HOURS = 100012;

  /** How long checking in/downloading a plan takes (for FL plans only). */
  TRAINING_FL_CHECKIN_LATENCY = 200001;

  /**
   * The end time of reporting results to the server, relative to the start
   * of the training session.
   */
  TRAINING_FL_REPORT_RESULTS_END_TIME = 200002;

  /** How long reporting results to the server takes. */
  TRAINING_FL_REPORT_RESULTS_LATENCY = 200003;

  /**
   * The end time of checking in/downloading a plan from the server, relative
   * to the start of the training session.
   */
  TRAINING_FL_CHECKIN_END_TIME = 200004;

  /** How long reporting results to the server takes. */
  TRAINING_FL_ELIGIBILITY_EVAL_CHECKIN_LATENCY = 200005;

  /**
   * The end time of multiple task assignments, relative to the start of the
   * training session.
   */
  TRAINING_FL_MULTIPLE_TASK_ASSIGNMENTS_END_TIME = 200006;

  /** How long multiple task assignments takes. */
  TRAINING_FL_MULTIPLE_TASK_ASSIGNMENTS_LATENCY = 200007;

  /** The number of rounds between a client's consecutive training sessions on
   * the same task. */
  TRAINING_FL_ROUND_SEPARATION = 200008;
}
