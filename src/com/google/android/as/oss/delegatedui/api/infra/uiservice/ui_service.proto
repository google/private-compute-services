// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package com.google.android.as.oss.delegatedui.api.infra.uiservice;

import "src/com/google/android/as/oss/delegatedui/api/infra/uiservice/ui_service_create.proto";
import "src/com/google/android/as/oss/delegatedui/api/infra/uiservice/ui_service_data_egress.proto";
import "src/com/google/android/as/oss/delegatedui/api/infra/uiservice/ui_service_invalidate.proto";
import "src/com/google/android/as/oss/delegatedui/api/infra/uiservice/ui_service_nested_scroll.proto";
import "src/com/google/android/as/oss/delegatedui/api/infra/uiservice/ui_service_prepare.proto";
import "src/com/google/android/as/oss/delegatedui/api/infra/uiservice/ui_service_size_change.proto";
import "src/com/google/android/as/oss/delegatedui/api/infra/uiservice/ui_service_update.proto";

option java_package = "com.google.android.as.oss.delegatedui.api.infra.uiservice";
option java_multiple_files = true;

// Service to render protected content using a delegated UI.
//
// This service will host a delegated UI containing protected content, that a
// client app can embed in their UI. The client app will not be able to access
// the actual rendered content.
//
// Upon user consent, protected data may be egressed back to the client.
service DelegatedUiService {
  // Prepares for a delegated UI session. Client apps should query this before
  // trying to connect to a delegated UI session.
  //
  // Request headers contain Parcelable "configuration".
  rpc PrepareDelegatedUiSession(DelegatedUiPrepareRequest)
      returns (DelegatedUiPrepareResponse) {
    option deadline = 5.0;
  }

  // Establishes a bi-directional stream for a client to communicate with the
  // delegated UI service.
  //
  // Request headers contain Parcelable "host_token" and "configuration".
  // Response headers contain Parcelable "surface_package".
  rpc ConnectDelegatedUiSession(stream DelegatedUiRequest)
      returns (stream DelegatedUiResponse) {
    option deadline = 5.0;
  }

  // Invalidates an active delegated UI session from an external component.
  // Clients should not call this, and should instead pass an update request
  // into a connected session.
  rpc InvalidateDelegatedUiSession(DelegatedUiInvalidateRequest)
      returns (DelegatedUiInvalidateResponse) {
    option deadline = 5.0;
  }
}

// Request from the calling client to the delegated UI service.
message DelegatedUiRequest {
  oneof request {
    // Create - initialization call to set up remote rendering via delegated UI
    DelegatedUiCreateRequest create_request = 1;
    // Update - send updates from client that that may impact the delegated UI
    DelegatedUiUpdateRequest update_request = 2;
  }
}

// Response from the delegated UI service to the calling client.
// Next id: 7
message DelegatedUiResponse {
  oneof response {
    // Response to create request.
    DelegatedUiCreateResponse create_response = 1;
    // Response to update request.
    DelegatedUiUpdateResponse update_response = 6;
    // Asynchronous event - notifies on size change event from delegated UI.
    DelegatedUiSizeChangeResponse size_change_response = 2;
    // Asynchronous event - notifies on consented data egress from delegated UI.
    DelegatedUiDataEgressResponse data_egress_response = 3;
    // Asynchronous event - notifies on nested scroll event from delegated UI.
    DelegatedUiNestedScrollResponse nested_scroll_response = 4;
    // Asynchronous event - notifies on nested fling event from delegated UI.
    DelegatedUiNestedFlingResponse nested_fling_response = 5;
  }
}
