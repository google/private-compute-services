// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package com.google.android.as.oss.delegatedui.api.integration.templates.beacon;

import "src/com/google/android/as/oss/delegatedui/api/integration/templates/ui_id_token.proto";
import "src/com/google/android/as/oss/feedback/proto/entity_feedback_dialog_data.proto";
import "src/com/google/android/as/oss/feedback/proto/feedback_dialog_common_data.proto";


option features.field_presence = IMPLICIT;
option java_package = "com.google.android.as.oss.delegatedui.api.integration.templates.beacon";
option java_multiple_files = true;

// Beacon template data.
message BeaconTemplateData {
  BeaconWidget widget = 1 [features.field_presence = EXPLICIT];
  // The unique ID of the remote UI session.
  string session_uuid = 2;
}

// Represents the entire widget, the entry point to to all beacon template data
// Next ID: 16
message BeaconWidget {
  repeated BeaconGeneralCard general_cards = 1 [deprecated = true];
  repeated BeaconGeneralCard general_cards_emails = 10;
  repeated BeaconGeneralCard general_cards_messages = 11;
  repeated BeaconDetailedCard detailed_cards = 2;
  BeaconAiDisclaimer ai_disclaimer_with_link = 13;
  // A static string call to action button. When clicked, the widget will expand
  // to show more results
  string cta_display_more_results = 4;
  // A static string call to action button. When clicked, the widget will
  // collapse to show fewer results
  string cta_display_fewer_results = 12;
  // The background color of the widget
  int64 background_color = 5 [features.field_presence = EXPLICIT];

  // The UiIdTokens for the widget's UI elements.
  // TODO: populate these UiIdTokens.
  UiIdToken general_card_ui_id = 6;
  UiIdToken detailed_card_ui_id = 7;
  UiIdToken disclaimer_button_ui_id = 8;
  UiIdToken show_more_results_button_ui_id = 9;

  BeaconGenericContentDescriptions generic_content_descriptions = 14;

  // Deprecated fields
  string ai_disclaimer = 3 [deprecated = true];
  feedback.api.FeedbackDialogCommonData feedback_dialog_common_data = 15
      [deprecated = true];
}

  // Deprecated fields
  string good_feedback_button_accessibility_content_description = 5
      [deprecated = true];
  string bad_feedback_button_accessibility_content_description = 6
      [deprecated = true];
  string card_expanded_accessibility_content_description = 7
      [ deprecated = true];
  string card_collapsed_accessibility_content_description = 8
      [ deprecated = true];
  string card_expanded_accessibility_state_description = 18 [deprecated = true];
  string card_collapsed_accessibility_state_description = 19
      [deprecated = true];
  string card_collapsed_accessibility_click_label = 20 [deprecated = true];
  string card_expanded_accessibility_click_label = 21 [deprecated = true];
  string feedback_submitted_state_description = 15 [deprecated = true];
  string feedback_not_submitted_state_description = 16 [deprecated = true];
}

// Represents a grid-based layout in a more "detailed" view
// Next ID: 17
message BeaconDetailedCard {
  // An icon to be displayed for each card. Helps the user easily understand the
  // type of data in the card
  enum Icon {
    UNKNOWN = 0;
    RECEIPT = 1;
    EVENT = 2;
    ORDERS = 3;
    TRANSPORT = 4;
    LODGING = 5;
  }
  // The title of the card
  string title = 1;
  Icon icon = 2 [deprecated = true];
  repeated BeaconRow rows = 3;
  BeaconResponseSource data_source = 4 [features.field_presence = EXPLICIT];

  // The UiIdTokens for the card's UI elements.
  UiIdToken good_feedback_button_ui_id = 7;
  UiIdToken bad_feedback_button_ui_id = 8;
  UiIdToken source_navigation_button_ui_id = 9;

  // The entity feedback data for the card
  feedback.api.EntityFeedbackDialogData thumbs_up_entity_feedback_dialog_data =
      15;
  feedback.api.EntityFeedbackDialogData
      thumbs_down_entity_feedback_dialog_data = 16;

  // The unique identifier of the card within the list. This is used to uniquely
  // identify the source data when rendered in a list
  string list_uuid = 10;

  // Deprecated fields
  string good_feedback_button_accessibility_content_description = 5
      [deprecated = true];
  string bad_feedback_button_accessibility_content_description = 6
      [deprecated = true];
  string feedback_submitted_state_description = 12 [deprecated = true];
  string feedback_not_submitted_state_description = 13 [deprecated = true];
  string card_sentiment_label = 11 [deprecated = true];
  string entity_content = 14 [deprecated = true];
}

// Represents a row in the widget's grid.
message BeaconRow {
  oneof row_layout {
    BeaconFullLengthRow full_length = 1;
    BeaconTwoItemRow half_half_split = 2;
    BeaconTwoItemRow seven_three_split = 3;
  }
}

// Single item in the row, always takes up the full width of a card
message BeaconFullLengthRow {
  BeaconRowItem item = 1;
}

// Two items in the row, could be split evenly or unevently in size, but the two
// items together will always take up the full width of a card
message BeaconTwoItemRow {
  BeaconRowItem item_one = 1;
  BeaconRowItem item_two = 2;
}

// The content inside a row item
message BeaconRowItem {
  // Informs the user what the item represents
  BeaconRowItemText label = 1;
  // The main content of the item
  BeaconRowItemText content = 2;
  // A quick summary of the content
  BeaconRowItemText content_summary = 3 [features.field_presence = EXPLICIT];

  // The content description for the row item. This is used by screen readers
  // to announce the row item to the user. It will be a combination of the
  // label, content, and content summary, in the format "<Label>: <Content>.
  // <ContentSummary>"
  string content_description = 4;
}

// Text with metadata such as size
message BeaconRowItemText {
  // The size of the text
  enum TextSize {
    UNKNOWN = 0;
    SMALL = 1;
    MEDIUM = 2;
    LARGE = 3;
  }

  // The raw string to be displayed
  string text = 1;
  TextSize text_size = 2;
}

// The source of the data for a response
message BeaconResponseSource {
  enum SourceType {
    UNKNOWN = 0;
    EMAIL = 1;
    MESSAGE = 2;
  }
  SourceType source_type = 1;
  // The text to be displayed on the CTA button. If the user clicks this, they
  // will be taken to the source of the data.
  string cta_button_text = 2;

  /**
   * The index of the pending intent in the list of pending intents. This is
   * used to launch the source of the data when the CTA button is clicked.
   *
   *
   * ## IMPORTANT
   *
   * Since we depend on hasPendingIntentIndex(), this is a 1-based
   * index. Consumer must subtract 1 to get the true index in the pending
   * intents list.
   */
  int32 pending_intent_index = 3 [features.field_presence = EXPLICIT];

  string source_package_name = 4 [
    features.field_presence = EXPLICIT
  ];
}

// A static string that informs the user that the data presented was generated
// by AI. This string also contains a clickable link so it is separated in order
// to account for all variations of the link text (with i18n considerations)
message BeaconAiDisclaimer {
  string full_text = 1;
  string url = 2;
  int32 url_start_index = 3;
  int32 url_end_index = 4;
  /**
   * The index of the pending intent in the list of pending intents. This is
   * used to launch the source of the data when the CTA button is clicked.
   *
   *
   * ## IMPORTANT
   *
   * Since we depend on hasPendingIntentIndex(), this is a 1-based
   * index. Consumer must subtract 1 to get the true index in the pending
   * intents list.
   */
  int32 pending_intent_index = 5 [features.field_presence = EXPLICIT];
}

// Generic content descriptions that can be used by both detailed and general
// cards.
// Next ID: 10
message BeaconGenericContentDescriptions {
  // The content description for the good feedback button
  string good_feedback_content_description = 1;
  // The content description for the bad feedback button
  string bad_feedback_content_description = 2;
  // The state description for feedback buttons when the feedback is submitted
  string feedback_submitted_state_description = 3;
  // The state description for feedback buttons when the feedback is not
  // submitted
  string feedback_not_submitted_state_description = 4;
  // The label for the sentiment buttons (thumbs up / thumbs down)
  string card_sentiment_label = 5;
  // The state description for the expand button when the card is expanded
  string card_expanded_accessibility_state_description = 6;
  // The state description for the expand button when the card is collapsed
  string card_collapsed_accessibility_state_description = 7;
  // The click label for the expand button when the card is collapsed. User
  // would hear "Double tap to expand"
  string card_collapsed_accessibility_click_label = 8;
  // The click label for the expand button when the card is expanded. User would
  // hear "Double tap to collapse"
  string card_expanded_accessibility_click_label = 9;
}
