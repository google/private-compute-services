// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package google.internal.abuse.ondevicesafety.v1alpha;

import "google/api/annotations.proto";

option features.field_presence = IMPLICIT;
option java_multiple_files = true;
option java_outer_classname = "ProgramBlobServiceProto";
option java_package = "com.google.android.as.oss.pd.service.api.proto";

// Service API for downloading protections.
service ProgramBlobService {
  // Downloads a program blob.
  rpc DownloadBlob(DownloadBlobRequest) returns (DownloadBlobResponse) {
    option (.google.api.http) = {
      post: "/v1alpha/blob:downloadBlob"
      body: "*"
    };
  }
}

// Label expresses a generic constraint in blob selection.
message Label {
  string attribute = 1;
  string value = 2;
}

// SDK information to help server estimate SDK capabilities.
message ClientVersion {
  enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_ANDROID = 1;
    TYPE_ANDROID_CORE = 2;
    TYPE_ANDROID_CORE_ATTESTED_PKVM = 3;
  }

  // Type of the SDK.
  Type type = 1;

  // Build CL for the SDK.
  int64 version = 2;
}

// BlobConstraints expresses the constraints placed on the blob during
// blob selection.
message BlobConstraints {
  // The tier this device is in, which plays a role in the program blob
  // selection.
  string device_tier = 2;

  // Additional labels that the requested program blob should carry, which
  // further express the constraints placed on the blob during blob selection.
  repeated Label label = 4;

  // Application identifier.
  string client_id = 5;

  // Application version.
  ClientVersion client_version = 6;

  reserved 1, 3;
}

message Counters {
  reserved 1, 2, 3;
}

// The cryptographic keys to use for encrypting the blob.
message CryptoKeys {
  // The device generated public key to encrypt the blob.
  bytes public_key = 1;

  // If set to true, use the client id as the associated_data for the crypto. If
  // set to false, use the default fixed value.
  bool use_client_id_seed = 3;

  reserved 2;
}

// Metadata is the wrapper of all the device information to be sent in the
// DownloadBlobRequest rpc.
message Metadata {
  // Constraints placed on the blob in blob selection.
  BlobConstraints blob_constraints = 1;
  Counters counters = 2;

  // The cryptographic keys to use for encrypting the blob.
  CryptoKeys crypto_keys = 3;
}

message IntegrityResponse {
  reserved 1;

  // Response from content binding with Key Attestation.
  bytes key_attestation_token = 2;

  // Status of the integrity check from the client side.
  enum ClientStatus {
    // Unknown status.
    STATUS_UNKNOWN = 0;

    // Integrity check ran successfully and returned a token.
    STATUS_OK = 1;

    // No integrity module was found on device.
    STATUS_NOT_RUN = 2;

    // Integrity check returned an empty token.
    STATUS_EMPTY_FAILURE = 3;

    // Integrity check threw an exception.
    STATUS_EXCEPTION_FAILURE = 4;
  }

  // Status of the integrity check from the client side.
  ClientStatus client_status = 3;
}

message ProtectionProofConfig {
  bool exclude_v1_proof = 1;
  bool include_v2_proof = 2;
}

message DownloadBlobRequest {
  Metadata metadata = 1;
  IntegrityResponse integrity_response = 3;
  bytes page_token = 4;

  // Configuration that specifies which protection proofs are requested.
  ProtectionProofConfig protection_proof_config = 7;

  // Define the download mode.
  DownloadMode download_mode = 8;

  enum DownloadMode {
    MODE_UNSPECIFIED = 0;

    // Request partial updates, whenever it's possible.
    PARTIAL_UPDATES_ENABLED = 1;

    // Requests the full protection package.
    FULL_PACKAGE_FORCED = 2;
  }

  reserved 2, 5, 6;
}

// LogEntryId identifies a specific entry in the transparency log.
message LogEntryId {
  // The leaf index in the Merkle tree which backs up the transparency log.
  uint64 leaf_index = 1;

  // The id of the Merkle tree which backs up the transparency log.
  int64 tree_id = 2;
}

// InclusionProof is the proof that a transparency log contains a certain entry.
message InclusionProof {
  // hashes contains the inclusion proof hashes.
  repeated bytes hashes = 1;
}

// LogCheckpoint is a checkpoint in the transparency log.
message LogCheckpoint {
  bytes checkpoint = 1;
  bytes signature = 2;
}

// ProtectionProof is the proof that can be verified to ensure the protection
// shipped to user devices has been included in transparency logs.
message ProtectionProof {
  // The id of the entry in the transparency log that contains the
  // protection hash.
  LogEntryId log_entry_id = 1;

  // A checkpoint of the transparency log taken at the time of serving the
  // protection.
  LogCheckpoint log_checkpoint = 2;

  // Proof that the protection is included in the transparency log.
  InclusionProof inclusion_proof = 3;
}

// The type of component.
enum ProtectionType {
  TYPE_UNKNOWN = 0;
  TYPE_RULE = 1;
  TYPE_MODEL = 2;
  TYPE_BLM_BLOCK_LIST = 4;
  reserved 3, 5, 6;
}

message ProtectionComponent {
  // Component content.
  bytes blob = 1;
  ProtectionType type = 2;

  // Optional: If set, it indicates this component is an update to a previous
  // protection.
  bool is_partial_update = 4;

  // Optional: The index of the component.
  int32 partial_update_index = 5;

  reserved 3;
}

message DownloadBlobResponse {
  // The blob which contains the components for the request.
  bytes blob = 1;

  // Opaque server side generated token for clients to pass back in their next
  // DownloadBlobRequest.
  bytes next_page_token = 2;

  // Opaque server side generated token for debugging.
  bytes protection_token = 6;

  // Proof that can be verified to ensure the protection shipped to user's
  // device has been included in a transparency log.
  ProtectionProof protection_proof_v2 = 12;
  repeated ProtectionComponent protection_components = 13;

  // This type specifies the status of the downloaded package.
  DownloadStatus download_status = 14;

  enum DownloadStatus {
    STATUS_UNSPECIFIED = 0;
    FULL_PACKAGE_DOWNLOADED = 1;
    PARTIAL_PACKAGE_UPDATED = 2;
    PARTIAL_UPDATE_EMPTY = 3;
  }

  reserved 3, 4, 5, 7, 8, 9, 10, 11, 15;
}
